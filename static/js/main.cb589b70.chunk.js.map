{"version":3,"sources":["components/Intro.js","components/Result.js","components/GameComponent.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Intro","console","log","className","to","Result","props","score","questions","length","userCorrectedAnswer","map","question","indexOf","is_correct","GameComponent","useState","setQuestions","currentQuestion","setCurrentQuestion","setScore","gameStart","setGameStart","gameEnd","setGameEnd","setUserCorrectedAnswer","fetchQuestionsAPI","a","fetch","then","res","json","data","results","catch","error","handleUserAnswer","event","preventDefault","target","value","correct_answer","correct","useEffect","incorrect_answers","category","onClick","App","exact","path","component","render","routerProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cb589b70.chunk.js","sourcesContent":["import { React } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Intro() {\n\tconsole.log('render this')\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<h1 className='title'>Welcome to the Trivia Challenge!</h1>\n\t\t\t\t<p className='intro-text'>\n\t\t\t\t\tYou will be presented with 10 True or False questions.\n\t\t\t\t</p>\n\t\t\t\t<p className='intro-text'> Can you score 100%? </p>\n\t\t\t</div>\n\n\t\t\t<Link to='/game'>\n\t\t\t\t{' '}\n\t\t\t\t<button className='general-button'> BEGIN </button>{' '}\n\t\t\t</Link>\n\t\t</>\n\t);\n}\n\nexport default Intro;\n","import { React } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Result(props) {\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<h2>You Scored:</h2>\n\t\t\t\t<h2>\n\t\t\t\t\t{props.score} / {props.questions.length}\n\t\t\t\t</h2>\n\t\t\t\t{props.userCorrectedAnswer.map((question) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={props.userCorrectedAnswer.indexOf(question)}>\n\t\t\t\t\t\t\t<div className='question-container'>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{props.userCorrectedAnswer.indexOf(question) + 1}/ {question.question}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t-Your answer is:\n\t\t\t\t\t\t\t\t\t<span className={question.is_correct}>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{question.is_correct}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<div>\n\t\t\t\t\t<Link to='/'>\n\t\t\t\t\t\t<button className='general-button'> PLAY AGAIN? </button>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default Result;\n","import { React, useState, useEffect } from 'react';\nimport Result from './Result';\n\nfunction GameComponent() {\n\t//variable for storing questions from api\n\tconst [questions, setQuestions] = useState([]);\n\t//variable to keep track of current question and index\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t//variable to store core\n\tconst [score, setScore] = useState(0);\n\t//variable to check if game start\n\tconst [gameStart, setGameStart] = useState(false);\n\t//variable to end the game\n\tconst [gameEnd, setGameEnd] = useState(false);\n    //variable to keep track of corrected answer \n\tconst [userCorrectedAnswer, setUserCorrectedAnswer] = useState([]);\n\n\t//function to fetch questions from api\n\tconsole.log('render game component')\n\tconst fetchQuestionsAPI = async () => {\n\t\tconst url =\n\t\t\t'https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean';\n\t\tfetch(url)\n\t\t\t.then((res) => res.json())\n\t\t\t//if api return array then set gameStart to true\n\t\t\t.then((data) => {\n\t\t\t\tsetQuestions(data.results);\n\t\t\t\tsetGameStart(true);\n\t\t\t})\n\t\t\t//checking if questions return correctly if there's error then log it\n\t\t\t.catch((error) => console.log(error));\n\t};\n\n    //function to handle user's response\n\tconst handleUserAnswer = (event) => {\n\t\tevent.preventDefault();\n        //if user answer correct then increase score, push to corrected answer array\n\t\tif (event.target.value === questions[currentQuestion].correct_answer) {\n\t\t\tsetScore(score + 1);\n\t\t\tsetUserCorrectedAnswer((correct) => [\n\t\t\t\t...correct,\n\t\t\t\t{\n\t\t\t\t\tis_correct: 'Correct',\n\t\t\t\t\tquestion: questions[currentQuestion].question,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tsetUserCorrectedAnswer((correct) => [\n\t\t\t\t...correct,\n\t\t\t\t{\n\t\t\t\t\tis_correct: 'Incorrect',\n\t\t\t\t\tquestion: questions[currentQuestion].question,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t\t//check if current question is the last question, if not then increase question by 1\n\t\tif (currentQuestion + 1 < questions.length) {\n\t\t\tsetCurrentQuestion(currentQuestion + 1);\n        //if game is end then navigate to result page    \n\t\t} else {\n\t\t\tsetGameEnd(true);\n\t\t}\n\t};\n    //fetch questions api when page load\n\tuseEffect(() => {\n\t\tfetchQuestionsAPI();\n\t\t// eslint-disable-next-line\n\t}, []);\n    //if game end then render result page with variable passing down\n\tif (gameEnd) {\n\t\treturn <Result score={score} userCorrectedAnswer={userCorrectedAnswer} questions={questions}> </Result>\n\t} else {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{/* if gameStart is true then render questions */}\n\t\t\t\t\t{gameStart && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{/*update map method to render each question at a time */}\n\t\t\t\t\t\t\t{questions[currentQuestion].incorrect_answers.map(() => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={currentQuestion} >\n\t\t\t\t\t\t\t\t\t\t<h1 className='title'> {questions[currentQuestion].category}</h1>\n\t\t\t\t\t\t\t\t\t\t<div className='question-box' >\n\t\t\t\t\t\t\t\t\t\t\t<p className='intro-text'>{questions[currentQuestion].question}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t{currentQuestion +1} of {questions.length}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<button className='general-button' onClick={handleUserAnswer} value='True'>\n\t\t\t\t\t\t\t\t\t\t\t\tTRUE\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button className='general-button' onClick={handleUserAnswer} value='False'>\n\t\t\t\t\t\t\t\t\t\t\t\tFALSE\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default GameComponent;\n","import './App.css';\nimport Intro from './components/Intro';\nimport GameComponent from './components/GameComponent';\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Route exact path='/' component={Intro}></Route>\n\t\t\t<Route\n\t\t\t\texact\n\t\t\t\tpath='/game'\n\t\t\t\trender={(routerProps) => {\n\t\t\t\t\treturn <GameComponent></GameComponent>;\n\t\t\t\t}}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nReactDOM.render(\n\t\n\t\t<Router>\n\t\t\t<App />\n\t\t</Router>,\n\t\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();"],"sourceRoot":""}